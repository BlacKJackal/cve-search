{"name":"Cve-search - Common Vulnerabilities and Exposures local search tool","tagline":"cve-search is a tool to import CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) into a MongoDB to facilitate search and processing of CVEs.","body":"cve-search\r\n==========\r\n\r\ncve-search is a tool to import CVE (Common Vulnerabilities and Exposures) and\r\nCPE (Common Platform Enumeration) into a MongoDB to facilitate search\r\nand processing of CVEs.\r\n\r\nThe main objective of the software is to avoid doing direct and public lookup\r\ninto the public CVE databases. This is usually faster to do local lookups and\r\nlimits your sensitive queries via the Internet.\r\n\r\n![cve-search visualization](https://farm9.staticflickr.com/8109/8603509755_c7690c2de4_n.jpg \"CVE Keywords Visualization Using Data From cve-search\")\r\n\r\nhttp://www.foo.be/cve/\r\n\r\nRequirements\r\n------------\r\n\r\n* Python3.2 or later\r\n* MongoDB 2.2 or later\r\n* redis server\r\n* Pip3\r\n  * PyMongo\r\n  * Flask\r\n  * Flask-PyMongo\r\n  * Flask-Login\r\n  * Tornado\r\n  * Whoosh\r\n  * Redis\r\n  * Python-dateUtil\r\n  * passlib\r\n  * feedformater (for RSS and Atom dump_last) http://code.google.com/p/feedformatter/\r\n  * Whoosh http://packages.python.org/Whoosh/ (If you're planning to use the Full-text indexer)\r\n\r\nThe requirements can be installed with pip:\r\n\r\n    sudo pip3 install -r requirements.txt\r\n\r\nInstallation of MongoDB\r\n-----------------------\r\n\r\nFirst, you'll need to have a Python 3 installation (3.2 or 3.3 preferred).\r\nThen you need to install MongoDB (2.2) from source (this should also work\r\nwith any standard packages from your favorite distribution). Don't forget\r\nto install the headers for development while installing MongoDB.\r\nYou can go to http://docs.mongodb.org/manual/installation/ for to get the\r\npackages for your distribution, or http://www.mongodb.org/downloads for\r\nthe source code.\r\n\r\n\r\nPopulating the database\r\n-----------------------\r\n\r\nFor the initial run, you need to populate the CVE database by running:\r\n\r\n    ./db_mgmt.py -p\r\n    ./db_mgmt_cpe_dictionary.py\r\n    ./db_updater.py -c\r\n\r\nIt will fetch all the existing XML files from the Common Vulnerabilities\r\nand Exposures database and the Common Platform Enumeration.\r\n\r\nA more detailed documentation can be found in the Documentations folder of the project.\r\n\r\nDatabase and collections\r\n------------------------\r\n\r\nThe MongoDB database is called cvedb and there are 8 collections:\r\n\r\n* cves (Common Vulnerabilities and Exposure items) - source NVD NIST\r\n* cpe (Common Platform Enumeration items) - source NVD NIST\r\n* vendor (Official Vendor Statements on CVE Vulnerabilities) - source NVD NIST\r\n* cwe (Common Weakness Enumeration items) - source NVD NIST\r\n* ranking (ranking rules per group) - local cve-search\r\n* d2sec (Exploitation reference from D2 Elliot Web Exploitation Framework) - source d2sec.com\r\n* vfeed (cross-references to CVE ids (e.g. OVAL, OpenVAS, ...)) - source vfeed\r\n* info (metadata of each collection like last-modified) - local cve-search\r\n\r\nUpdating the database\r\n---------------------\r\n\r\nAn updater script helps to start the db_mgmt_*  \r\n\r\n    ./db_updater.py -v\r\n\r\nYou can run it in a crontab, logging is done in syslog by default.\r\n\r\nUsage\r\n-----\r\n\r\nYou can search the database using search.py\r\n\r\n    ./search.py -p cisco:ios:12.4\r\n    ./search.py -p cisco:ios:12.4 -o json\r\n    ./search.py -f nagios -n\r\n    ./search.py -p microsoft:windows_7 -o html\r\n\r\nIf you want to search all the WebEx vulnerabilities and only printing the official\r\nreferences from the supplier.\r\n\r\n    ./search.py -p webex: -o csv  -v \"cisco\"\r\n\r\nYou can also dump the JSON for a specific CVE ID.\r\n\r\n    ./search.py -c CVE-2010-3333\r\n\r\nOr you can use the XMPP bot\r\n\r\n    ./search_xmpp.py -j mybot@jabber.org -p strongpassword\r\n\r\nOr dump the last 2 CVE entries in RSS or Atom format\r\n\r\n    ./dump_last.py -f atom -l 2\r\n\r\nOr you can use the webinterface.\r\n\r\n    ./web/index.py\r\n\r\nUsage of the ranking database\r\n-----------------------------\r\n\r\nThere is a ranking database allowing to rank software vulnerabilities based on\r\ntheir common platform enumeration name. The ranking can be done per organization\r\nor department within your organization or any meaningful name for you.\r\n\r\nAs an example, you can add a partial CPE name like \"sap:netweaver\" which is very\r\ncritical for your accounting department.\r\n\r\n    ./python3.3 db_ranking.py  -c \"sap:netweaver\" -g \"accounting\" -r 3\r\n\r\nand then you can lookup the ranking (-r option) for a specific CVE-ID:\r\n\r\n    ./python3.3 search.py -c CVE-2012-4341  -r  -n\r\n\r\nAdvanced usage\r\n--------------\r\n\r\nAs cve-search is based on a set of tools, it can be used and combined with standard Unix tools. If you ever wonder what are the top vendors using the term \"unknown\" for their vulnerabilities:\r\n\r\n    python3 search_fulltext.py -q unknown -f | jq -r '. | .vulnerable_configuration[0]' | cut -f3 -d: | sort  | uniq -c  | sort -nr | head -10\r\n\r\n    1500 oracle\r\n    381 sun\r\n    372 hp\r\n    232 google\r\n    208 ibm\r\n    126 mozilla\r\n    103 microsoft\r\n    100 adobe\r\n     78 apple\r\n     68 linux\r\n\r\nYou can compare CVSS (Common Vulnerability Scoring System ) values of some products based on their CPE name. Like comparing oracle:java versus sun:jre and using R to make some statistics about their CVSS values:\r\n\r\n    python3 search.py -p oracle:java -o json  | jq -r '.cvss' | Rscript -e 'summary(as.numeric(read.table(file(\"stdin\"))[,1]))'\r\n    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.\r\n    1.800   5.350   9.300   7.832  10.000  10.000\r\n\r\n\r\n    python3 search.py -p sun:jre -o json  | jq -r '.cvss' | Rscript -e 'summary(as.numeric(read.table(file(\"stdin\"))[,1]))'\r\n    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.\r\n    0.000   5.000   7.500   7.333  10.000  10.000\r\n\r\nFulltext indexing\r\n-----------------\r\n\r\nIf you want to index all the CVEs from your current MongoDB collection:\r\n\r\n    ./python3.3 db_fulltext.py\r\n\r\nand you query the fulltext index (to get a list of matching CVE-ID):\r\n\r\n    ./python3.3 search_fulltext.py -q NFS -q Linux\r\n\r\nor to query the fulltext index and output the JSON object for each CVE-ID:\r\n\r\n    ./python3.3 search_fulltext.py -q NFS -q Linux -j\r\n\r\nFulltext visualization\r\n----------------------\r\n\r\nThe fulltext indexer visualization is using the fulltext indexes to build\r\na list of the most common keywords used in CVE. [NLTK](http://nltk.org/) is\r\nrequired to generate the keywords with the most common English\r\nstopwords and lemmatize the output. [NTLK for Python 3](http://nltk.org/nltk3-alpha/)\r\nexists but you need to use the alpha version of NLTK.\r\n\r\n    ./python3.3 search_fulltext.py  -g -s >cve.json\r\n\r\nYou can see a visualization on the [demo site](http://www.foo.be/cve/).\r\n\r\nWeb interface\r\n-------------\r\n\r\nThe web interface is a minimal interface to see the last CVE entries and\r\nquery a specific CVE. You'll need flask in order to run the website and [Flask-PyMongo](http://flask-pymongo.readthedocs.org/en/latest/). To start\r\nthe web interface:\r\n\r\n    cd ./web\r\n    ./python3.3 index.py\r\n\r\nThen you can connect on http://127.0.0.1:5000/ to browser the last CVE.\r\n\r\nSoftware using cve-search\r\n-------------------------\r\n\r\n* [cve-portal](https://www.github.com/CIRCL/cve-portal) which is a CVE notification portal\r\n* [cve-search-mt](https://www.github.com/NorthernSec/cve-search-mt) which is a set of management tools for CVE-Search\r\n* [cve-scan](https://www.github.com/NorthernSec/cve-scan) which is a NMap CVE system scanner\r\n\r\nLicense\r\n-------\r\n\r\ncve-search is free software released under the \"Modified BSD license\"\r\n\r\n    Copyright (c) 2012 Wim Remes - https://github.com/wimremes/\r\n    Copyright (c) 2012-2014 Alexandre Dulaunoy - https://github.com/adulau/\r\n    Copyright (c) 2014 Pieter-Jan Moreels - https://github.com/pidgeyl/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}