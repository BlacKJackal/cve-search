{"name":"Cve-search - Common Vulnerabilities and Exposures local search tool","tagline":"cve-search is a tool to import CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) into a MongoDB to facilitate search and processing of CVEs.","body":"cve-search\r\n==========\r\n\r\ncve-search is a tool to import CVE (Common Vulnerabilities and Exposures) and\r\nCPE (Common Platform Enumeration) into a MongoDB to facilitate search\r\nand processing of CVEs.\r\n\r\nThe main objective of the software is to avoid doing direct and public lookup\r\ninto the public CVE databases. This is usually faster to do local lookups and\r\nlimits your sensitive queries via the Internet.\r\n\r\n![cve-search visualization](https://farm9.staticflickr.com/8109/8603509755_c7690c2de4_n.jpg \"CVE Keywords Visualization Using Data From cve-search\")\r\nhttp://www.foo.be/cve/\r\n\r\nRequirements\r\n------------\r\n\r\n* Python 3\r\n* MongoDB\r\n* PyMongo\r\n* sax parser (part of Python)\r\n* feedformater (for RSS and Atom dump_last) http://code.google.com/p/feedformatter/\r\n\r\nIf you are planning to use the full-text indexer, you'll need:\r\n\r\n* Whoosh http://packages.python.org/Whoosh/\r\n\r\nInstallation of MongoDB\r\n-----------------------\r\n\r\nFirst, you'll need to have a Python 3 installation (3.2 or 3.3 preferred).\r\nThen you need to install MongoDB (2.2) from source (this should also work\r\nwith any standard packages from your favorite distribution). Don't forget\r\nto install the headers for development while installing MongoDB.\r\n\r\nThen, you'll need to install PyMongo to access from Python 3 the MongoDB\r\ndatabases. For installing PyMongo, you can download the source from the\r\noriginal website https://github.com/mongodb/mongo-python-driver .\r\n\r\n    python3 setup.py build\r\n    sudo python3 setup.py install\r\n\r\nPopulating the database\r\n-----------------------\r\n\r\nFor the initial run, you need to populate the CVE database by running:\r\n\r\n    ./db_mgmt.py -p\r\n    ./db_mgmt_cpe_dictionnary.py\r\n\r\nIt will fetch all the existing XML files from the Common Vulnerabilities\r\nand Exposures database and the Common Platform Enumeration.\r\n\r\nBy default, there is no secondary indexes created in MongoDB for the\r\nCVE/CPE database. You might want to create indexes on the fields that are\r\ncommonly used for your searches. As the example, you can create the index\r\nfor the following collection and key:\r\n\r\n    db.cpe.ensureIndex( {id:1 } )\r\n    db.cves.ensureIndex( {id:1} )\r\n    db.cves.ensureIndex( {vulnerable_configuration:1} )\r\n\r\n\r\nDatabase and collections\r\n------------------------\r\n\r\nThe MongoDB database is called cvedb and there are 4 collections:\r\n\r\n* cves (common vulnerabilities and exposure items)\r\n* cpe (common platform enumeration items)\r\n* ranking (ranking rules per group)\r\n* info (metadata of each collection like last-modified)\r\n\r\nUpdating the database\r\n---------------------\r\n\r\nAn updater script helps to start the db_mgmt_*  \r\n\r\n    ./db_updater.py -v\r\n\r\nYou can run it in a crontab, logging is done in syslog by default.\r\n\r\nUsage\r\n-----\r\n\r\nYou can search the database using search.py\r\n\r\n    ./search.py -p cisco:ios:12.4\r\n    ./search.py -p cisco:ios:12.4 -o json\r\n    ./search.py -f nagios -n\r\n    ./search.py -p microsoft:windows_7 -o html\r\n\r\nIf you want to search all the WebEx vulnerabilities and only printing the official\r\nreferences from the supplier.\r\n\r\n    ./search.py -p webex: -o csv  -v \"cisco\"\r\n\r\nYou can also dump the JSON for a specific CVE ID.\r\n\r\n    ./search.py -c CVE-2010-3333\r\n\r\nOr you can use the XMPP bot\r\n\r\n    ./search_xmpp.py -j mybot@jabber.org -p strongpassword\r\n\r\nOr dump the last 2 CVE entries in RSS or Atom format\r\n\r\n    ./dump_last.py -f atom -l 2\r\n\r\nUsage of the ranking database\r\n-----------------------------\r\n\r\nThere is a ranking database allowing to rank software vulnerabilities based on\r\ntheir common platform enumeration name. The ranking can be done per organization\r\nor department within your organization or any meaningful name for you.\r\n\r\nAs an example, you can add a partial CPE name like \"sap:netweaver\" which is very\r\ncritical for your accounting department.\r\n\r\n    ./python3.3 db_ranking.py  -c \"sap:netweaver\" -g \"accounting\" -r 3\r\n\r\nand then you can lookup the ranking (-r option) for a specific CVE-ID:\r\n\r\n    ./python3.3 search.py -c CVE-2012-4341  -r  -n\r\n\r\nFulltext indexing\r\n-----------------\r\n\r\nIf you want to index all the CVEs from your current MongoDB collection:\r\n\r\n    ./python3.3 db_fulltext.py\r\n\r\nand you query the fulltext index (to get a list of matching CVE-ID):\r\n\r\n    ./python3.3 search_fulltext.py -q NFS -q Linux\r\n\r\nor to query the fulltext index and output the JSON object for each CVE-ID:\r\n\r\n    ./python3.3 search_fulltext.py -q NFS -q Linux -j\r\n\r\nFulltext visualization\r\n----------------------\r\n\r\nThe fulltext indexer visualization is using the fulltext indexes to build\r\na list of the most common keywords used in CVE. [NLTK](http://nltk.org/) is\r\nrequired to generate the keywords with the most common English\r\nstopwords and lemmatize the output. [NTLK for Python 3](http://nltk.org/nltk3-alpha/)\r\nexists but you need to use the alpha version of NLTK.\r\n\r\n    ./python3.3 search_fulltext.py  -g -s >cve.json\r\n\r\nYou can see a visualization on the [demo site](http://www.foo.be/cve/).\r\n\r\nLicense\r\n-------\r\n\r\ncve-search is free software released under the \"Modified BSD license\"\r\n\r\n    Copyright (c) 2012 Wim Remes - https://github.com/wimremes/\r\n    Copyright (c) 2012-2013 Alexandre Dulaunoy - https://github.com/adulau/\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}